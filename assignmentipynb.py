# -*- coding: utf-8 -*-
"""ASSIGNMENTipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mSEZ8h9aQke3JtTvJbesThli0XjnKWel

- VARIABLES

1. Declare a variable named age and assign your age to it.
2. Create two variables x = 10 and y = 5. Print their sum.
3. Try using an invalid variable name like 2ndName and observe the error.
4. Assign a string to a variable and print it.
"""

#1
age = 23

#2
x=10
y=5
sum = x+y
print(sum)

#3
FirstName= 'Joe'
Secondname= 'Lucky'
FirstName
2ndName

#4
Country = 'Iceland'
Born_in = Country
print(Born_in)

#Challenge
Name = input("Enter your name:")
AGE = int (input("Enter your age:"))
print(f"Welcome {Name}, your age is {AGE}")

"""- DATA TYPES
1. Print the type of 42, 3.14, and 'hello'.
2. Convert a string '100' to an integer.
3. Add an integer and a float together. What is the result?
4. What happens when you try to multiply a string by a number?
"""

#1
print(type(42))
print(type(3.14))
print(type('hello'))

"""42 is an integer (int)

3.14 is a float (float)

'hello' is a string (str)
"""

#2
s = '100'
num = int(s)
print(num)
print(type(num))

"""int() converts the string to an integer"""

#3
ANS= 6+2.87
print(ANS)
print(type(ANS))

"""int+float results into a float"""

#4
print('sky'*3)

"""The result is the string being repeated

- CHALLENGE

Write a program that:

Asks the user to enter two numbers (as strings)
Converts them to integers or floats
Prints their sum and type
"""

#ANSWER
# Ask the user to enter two numbers
num1_A = input("Enter the first number: ")
num2_A = input("Enter the second number: ")

# Convert to int or float depending on content
def convert_num(s):
    if '.' in s:
        return float(s)
    else:
        return int(s)

num1 = convert_num(num1_A)
num2 = convert_num(num2_A)

# Calculate the sum
total = num1 + num2

# Print the result and its type
print("Sum:", total)
print("Type of the result:", type(total))

"""-DATA STRUCTURES
- Create a list of 5 fruits and print the third fruit.
- Create a dictionary with keys: name, age
-Print the value of age.
- Define a tuple with three numbers. Try modifying it. What happens?
- Create a set from a list with duplicate values.


- Create a program that:

Takes 5 user inputs and stores them in a list
Converts the list into a set and prints the unique values
"""

#1
fruits = ['apple', 'banana', 'cherry', 'mango', 'strawberry']
print(fruits[2])

#2
person = {'name': 'Alice', 'age': 30}
print(person['age'])

#3
numbers = (1, 2, 3)
numbers[0] = 10
#TypeError: 'tuple' object does not support item assignment because tuples are immutable

#4
nums = [1, 2, 2, 3, 4, 4, 5]
unique_nums = set(nums)
print(unique_nums)

#CHALLENGE

user_inputs = []

for i in range(5):
    item = input(f"Enter item {i+1}: ")
    user_inputs.append(item)

unique_inputs = set(user_inputs)

print("Unique values:", unique_inputs)

"""-LOOPS
- Use a for loop to print numbers from 1 to 10.
- Use a while loop to print numbers until the user enters stop.
- Write a loop that prints even numbers from 1 to 20.
- Explain what break and continue do in your own words.
-Challenge
- Write a guessing game that asks the user to guess a secret number between 1 and 10.

- Give feedback (too high / too low)
- Use a while loop
"""

#1
for i in range(1, 11):
    print(i)

#2
count = 1

while True:
    user_input = input("Enter anything to continue or 'stop' to end: ")
    if user_input.lower() == "stop":
        break
    print(f"Number: {count}")
    count += 1

#3
for number in range(1, 21):
    if number % 2 == 0:
        print(number)

"""Break stops the loop completey and continue skips the rest of the current loop iteration and moves to the next"""

#CHALLENGE
import random

secret_number = random.randint(1, 10)
guess = None

print("Let's play a game")
while guess != secret_number:
    guess = int(input("Guess a number between 1 and 10: "))

    if guess < secret_number:
        print("Too low! Try again.")
    elif guess > secret_number:
        print("Too high! Try again.")
    else:
        print("Congratulations! You guessed it right.")

"""- CONTROL FLOW
- Write a program that checks if a number is positive, negative, or zero.
- Create a program that checks if someone is eligible to vote.
- Write a program that takes 3 numbers and prints the largest one.
- Practice combining and, or, not.
- Challenge
- Build a grading system:

Input score (0–100)
Output grade: A (90+), B (80–89), etc


"""

#1
number = float(input("Enter a number: "))

if number > 0:
    print("The number is positive.")
elif number < 0:
    print("The number is negative.")
else:
    print("The number is zero.")

#2
age = int(input("Enter your age: "))

if age >= 18:
    print("You are eligible to vote.")
else:
    print("You are not eligible to vote yet.")

#3
a = float(input("Enter first number: "))
b = float(input("Enter second number: "))
c = float(input("Enter third number: "))

largest = a
if b > largest:
    largest = b
if c > largest:
    largest = c

print("The largest number is:", largest)

#4
age = int(input("Enter your age: "))
citizen = input("Are you a citizen? (yes/no): ").lower()

if age >= 18 and citizen == "yes":
    print("You can vote.")
else:
    print("You cannot vote.")


day = input("Enter the day: ").lower()
if day == "saturday" or day == "sunday":
    print("It's the weekend!")

is_raining = input("Is it raining? (yes/no): ").lower()
if not is_raining == "yes":
    print("You can go outside!")

#CHALLENGE
score = int(input("Enter your score (0–100): "))

if score >= 90:
    grade = "A"
elif score >= 80:
    grade = "B"
elif score >= 70:
    grade = "C"
elif score >= 60:
    grade = "D"
else:
    grade = "F"

print("Your grade is:", grade)

#FUNCTIONS
#1
def greet(name):
    print(f"Hello, {name}")

greet("BRIGHTS")

#2
def add(a, b):
    return a + b

result = add(3, 5)
print(result)

#3
def add(a, b):
    result = a + b
    print("even" if result % 2 == 0 else "odd")
    return result

sum_result = add(4, 3)

#4
def greet(name):
    print(f"Hello, {name}")

def welcome_user():
    name = input("Enter your name: ")
    greet(name)

welcome_user()

def calculator(a, b, operation):
    if operation == "+":
        return a + b
    elif operation == "-":
        return a - b
    elif operation == "*":
        return a * b
    elif operation == "/":
        if b != 0:
            return a / b
        else:
            return "Error: Division by zero"
    else:
        return "Invalid operation"

result = calculator(10, 5, "*")
print("Result:", result)

#1. Class and Object Basics

class Student:
    def __init__(self, name, age, grade):
        self.name = name
        self.age = age
        self.grade = grade

    def display_info(self):
        print(f"Name: {self.name}, Age: {self.age}, Grade: {self.grade}")

student1 = Student("Shine", 20, "A")
student2 = Student("Sunny", 21, "B")
student3 = Student("Night", 22, "A")

student1.display_info()
student2.display_info()
student3.display_info()

#2. Instance vs Class Methods
class BankAccount:
    bank_name = "BEAUTIFUL WORLD"  # Class variable

    def __init__(self, account_number, balance=0):
        self.account_number = account_number
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount

    def withdraw(self, amount):
        if amount <= self.balance:
            self.balance -= amount
        else:
            print("Insufficient funds")

    def display_balance(self):
        print(f"Account {self.account_number} Balance: ${self.balance}")

    @classmethod
    def display_bank_name(cls):
        print(f"Bank Name: {cls.bank_name}")

account1 = BankAccount("153000", 1000)
account2 = BankAccount("78650", 500)

account1.deposit(200)
account1.withdraw(100)
account1.display_balance()

account2.deposit(300)
account2.withdraw(1000)
account2.display_balance()

BankAccount.display_bank_name()

#3. Encapsulation
class Car:
    def __init__(self, make, model, year):
        self.__make = make
        self.__model = model
        self.__year = year
        self.__speed = 0

    def set_make(self, make):
        self.__make = make

    def get_make(self):
        return self.__make

    def set_model(self, model):
        self.__model = model

    def get_model(self):
        return self.__model

    def set_year(self, year):
        self.__year = year

    def get_year(self):
        return self.__year

    def increase_speed(self):
        self.__speed += 10

    def decrease_speed(self):
        self.__speed = max(0, self.__speed - 10)

    def display_details(self):
        print(f"Make: {self.__make}, Model: {self.__model}, Year: {self.__year}, Speed: {self.__speed} km/h")

car = Car("Toyota", "Corolla", 2020)
car.increase_speed()
car.increase_speed()
car.decrease_speed()
car.set_make("Honda")
car.display_details()

#4. Methods with Objects as Arguments
import math

class Circle:
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return math.pi * self.radius ** 2

    def circumference(self):
        return 2 * math.pi * self.radius

class Cylinder:
    def __init__(self, circle, height):
        self.circle = circle
        self.height = height

    def volume(self):
        return self.circle.area() * self.height

circle = Circle(4)
cylinder = Cylinder(circle, 7)
print(f"Cylinder Volume: {cylinder.volume():.2f}")

#5. Object Relationships (Aggregation)
class Author:
    def __init__(self, name, nationality):
        self.name = name
        self.nationality = nationality

    def display_info(self):
        print(f"Author: {self.name}, Nationality: {self.nationality}")

class Book:
    def __init__(self, title, price, author):
        self.title = title
        self.price = price
        self.author = author

    def display_details(self):
        print(f"Book: {self.title}, Price: ${self.price}")
        self.author.display_info()

author = Author("Krystall Moon", "Icelandic")
book1 = Book("The good side of life", 15.99, author)
book2 = Book("What is Life", 9.99, author)

book1.display_details()
book2.display_details()

#Assignment Challenge
class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width

    def perimeter(self):
        return 2 * (self.length + self.width)

    def compare_area(self, other):
        if self.area() > other.area():
            print("This rectangle is larger.")
        elif self.area() < other.area():
            print("The other rectangle is larger.")
        else:
            print("Both rectangles have the same area.")

rect1 = Rectangle(5, 4)
rect2 = Rectangle(6, 3)
rect3 = Rectangle(5, 4)

rect1.compare_area(rect2)
rect1.compare_area(rect3)